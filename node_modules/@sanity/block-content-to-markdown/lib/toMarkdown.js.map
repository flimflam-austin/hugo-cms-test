{"version":3,"sources":["../src/toMarkdown.js"],"names":["require","getImageUrl","getSerializers","blocksToNodes","mergeSerializers","mdSerializers","renderNode","render","props","childNodes","children","node","Object","assign","defaultSerializers","serializeSpan","markdownSerializers","toMarkdown","block","options","blocks","serializers","listNestMode","trim","module","exports"],"mappings":";;eAKIA,QAAQ,gDAAR,C;IAJFC,W,YAAAA,W;IACAC,c,YAAAA,c;IACAC,a,YAAAA,a;IACAC,gB,YAAAA,gB;;AAGF,IAAMC,gBAAgBL,QAAQ,eAAR,CAAtB;;AAEA,IAAMM,aAAa,SAAbA,UAAa,CAACC,MAAD,EAASC,KAAT,EAAgBC,UAAhB,EAA+B;AAChD,MAAMC,WAAWD,cAAeD,MAAMG,IAAN,IAAcH,MAAMG,IAAN,CAAWD,QAAzD;AACA,SAAOH,OAAOK,OAAOC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,EAAyB,EAACE,kBAAD,EAAzB,CAAP,CAAP;AACD,CAHD;;sBAK4CR,eAAeI,UAAf,C;IAArCQ,kB,mBAAAA,kB;IAAoBC,a,mBAAAA,a;;AAC3B,IAAMC,sBAAsBZ,iBAAiBU,kBAAjB,EAAqCT,aAArC,CAA5B;;AAEA,IAAMY,aAAa,SAAbA,UAAa,CAACC,KAAD,EAAyB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AAC1C,MAAMC,SAASF,SAAS,EAAxB;AACA,MAAMG,cAAcjB,iBAAiBY,mBAAjB,EAAsCG,QAAQE,WAAR,IAAuB,EAA7D,CAApB;AACA,MAAMb,QAAQI,OAAOC,MAAP,CAAc,EAAd,EAAkBM,OAAlB,EAA2B,EAACC,cAAD,EAASC,wBAAT,EAAsBC,cAAc,YAApC,EAA3B,CAAd;AACA,SAAOnB,cAAcG,UAAd,EAA0BE,KAA1B,EAAiCM,kBAAjC,EAAqDC,aAArD,EAAoEQ,IAApE,EAAP;AACD,CALD;;AAOA;AACAN,WAAWH,kBAAX,GAAgCA,kBAAhC;;AAEA;AACAG,WAAWhB,WAAX,GAAyBA,WAAzB;;AAEAuB,OAAOC,OAAP,GAAiBR,UAAjB","file":"toMarkdown.js","sourcesContent":["const {\n  getImageUrl,\n  getSerializers,\n  blocksToNodes,\n  mergeSerializers\n} = require('@sanity/block-content-to-hyperscript/internals')\n\nconst mdSerializers = require('./serializers')\n\nconst renderNode = (render, props, childNodes) => {\n  const children = childNodes || (props.node && props.node.children)\n  return render(Object.assign({}, props, {children}))\n}\n\nconst {defaultSerializers, serializeSpan} = getSerializers(renderNode)\nconst markdownSerializers = mergeSerializers(defaultSerializers, mdSerializers)\n\nconst toMarkdown = (block, options = {}) => {\n  const blocks = block || []\n  const serializers = mergeSerializers(markdownSerializers, options.serializers || {})\n  const props = Object.assign({}, options, {blocks, serializers, listNestMode: 'last-child'})\n  return blocksToNodes(renderNode, props, defaultSerializers, serializeSpan).trim()\n}\n\n// Expose default serializers to the user\ntoMarkdown.defaultSerializers = defaultSerializers\n\n// Expose logic for building image URLs from an image reference/node\ntoMarkdown.getImageUrl = getImageUrl\n\nmodule.exports = toMarkdown\n"]}